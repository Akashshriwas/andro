import React, { useState } from "react";
import "./Malware.css";
import Instruction from "./Instruction";

const MalwareDetection = () => {
  const [selectedTool, setSelectedTool] = useState("");
  const [apkFile, setApkFile] = useState(null);
  const [reportPath, setReportPath] = useState("");
  const [loading, setLoading] = useState(false);
  const [reportData, setReportData] = useState(null);
  const [showCriticals, setShowCriticals] = useState(false);
  const [showWarnings, setShowWarnings] = useState(false);
  const [showMediums, setShowMediums] = useState(false);
  const [showLows, setShowLows] = useState(false);

  const handleFileChange = (event) => {
    setApkFile(event.target.files[0]);
  };

  const handleRun = () => {
    if (!selectedTool || !apkFile) return;
    setLoading(true);

    const formData = new FormData();
    formData.append("apkFile", apkFile);

    fetch(`http://localhost:4000/api/${selectedTool}/malware`, {
      method: "POST",
      body: formData,
      responseType: "json",
    })
      .then((res) => res.json())
      .then((data) => {
        setReportData(data);
        setReportPath(true);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error running tool:", error);
        setLoading(false);
      });
  };

  const handleToolChange = (event) => {
    setSelectedTool(event.target.value);
  };

  const handleDownload = () => {
    // Handle downloading the report if needed
  };

  return (
    <div className="page-container">
      <Instruction />
      <h2>Select a malware Tool</h2>
      <select
        className="tool-select"
        value={selectedTool}
        onChange={handleToolChange}
      >
        <option value="">Select a tool</option>
        <option value="SUPER Android Analyzer">SUPER Android Analyzer</option>
        <option value="Virus">Virus Totals</option>
        <option value="Fortify">Fortify</option>
        <option value="Vezir">Vezir Project</option>
        {/* Add more tool options here */}
      </select>
      <h2>Upload an APK File</h2>
      <input type="file" accept=".apk" onChange={handleFileChange} />
      {selectedTool && apkFile && (
        <div className="tool-infoo">
          <h3>Selected Tool: {selectedTool}</h3>
          <h3>Uploaded APK File: {apkFile.name}</h3>
          <button onClick={handleRun} disabled={loading}>
            {loading ? "Running..." : "Run"}
          </button>
          {reportPath && reportData && (
            <div className="report">
              <h4>Report:</h4>
              <div>
                <h5 onClick={() => setShowCriticals(!showCriticals)}>Criticals</h5>
                {showCriticals && (
                  <div>
                    {reportData.criticals.map((item, index) => (
                      <div key={index}>
                        <h6>{item.name}</h6>
                        <p><strong>Criticality:</strong> {item.criticality}</p>
                        <p><strong>Description:</strong> {item.description}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <div>
                <h5 onClick={() => setShowWarnings(!showWarnings)}>Warnings</h5>
                {showWarnings && (
                  <div>
                    {reportData.warnings.map((item, index) => (
                      <div key={index}>
                        <h6>{item.name}</h6>
                        <p><strong>Criticality:</strong> {item.criticality}</p>
                        <p><strong>Description:</strong> {item.description}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <div>
                <h5 onClick={() => setShowMediums(!showMediums)}>Mediums</h5>
                {showMediums && (
                  <div>
                    {reportData.mediums.map((item, index) => (
                      <div key={index}>
                        <h6>{item.name}</h6>
                        <p><strong>Criticality:</strong> {item.criticality}</p>
                        <p><strong>Description:</strong> {item.description}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <div>
                <h5 onClick={() => setShowLows(!showLows)}>Lows</h5>
                {showLows && (
                  <div>
                    {reportData.lows.map((item, index) => (
                      <div key={index}>
                        <h6>{item.name}</h6>
                        <p><strong>Criticality:</strong> {item.criticality}</p>
                        <p><strong>Description:</strong> {item.description}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <button onClick={handleDownload}>Download Report</button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default MalwareDetection;
